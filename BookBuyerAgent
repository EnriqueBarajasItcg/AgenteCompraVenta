import jade.core.Agent;
import behaviours.RequestPerformer;
import jade.core.AID;
import jade.core.behaviours.*;
import jade.domain.DFService;
import jade.domain.FIPAException;
import jade.domain.FIPAAgentManagement.DFAgentDescription;
import jade.domain.FIPAAgentManagement.ServiceDescription;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class BookBuyerAgent extends Agent {
  private String bookTitle;
  private AID[] sellerAgents;
  private int ticker_timer = 10000;
  private BookBuyerAgent this_agent = this;
  
  //Componentes de la interfaz gráfica
  private JFrame frame;
  private JTextField bookTitleField;
  private JButton buyButton;
  
  protected void setup() {
    System.out.println("Agente Comprador " + getAID().getName() + " esta listo");
    
    Object[] args = getArguments();
    if(args != null && args.length > 0) {
      bookTitle = (String)args[0];
      System.out.println("Libro: " + bookTitle);
      
      // Creación de la interfaz gráfica
      frame = new JFrame("Agente Comprador");
      frame.setLayout(new FlowLayout());
      frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      
      JLabel titleLabel = new JLabel("Ingrese el titulo del libro:");
      bookTitleField = new JTextField(20);
      bookTitleField.setText(bookTitle);
      buyButton = new JButton("Comprar");
      
      // Agregar botón de compra
      buyButton.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent e) {
          bookTitle = bookTitleField.getText(); // Actualizar el título del libro desde la interfaz
          buyBook();
        }
      });
      
      frame.add(titleLabel);
      frame.add(bookTitleField);
      frame.add(buyButton);
      
      frame.pack();
      frame.setVisible(true);
      
      addBehaviour(new TickerBehaviour(this, ticker_timer) {
        protected void onTick() {
          System.out.println("Tratando de comprar " + bookTitle);
          
          DFAgentDescription template = new DFAgentDescription();
          ServiceDescription sd = new ServiceDescription();
          sd.setType("Venta de libros");
          template.addServices(sd);
          
          try {
            DFAgentDescription[] result = DFService.search(myAgent, template);
            System.out.println("Encontré los siguientes agentes vendedores:");
            sellerAgents = new AID[result.length];
            for(int i = 0; i < result.length; i++) {
              sellerAgents[i] = result[i].getName();
              System.out.println(sellerAgents[i].getName());
            }
            
          }catch(FIPAException fe) {
            fe.printStackTrace();
          }
          
          buyBook();
        }
      });
    } else {
      System.out.println("No se ha especificado ningún título del libro");
      doDelete();
    }
  }
  
  // Método para comprar el libro
  private void buyBook() {
    //Imprime la compra del libro
    System.out.println("Intentando comprar el libro: " + bookTitle);
  }
  
  protected void takeDown() {
    System.out.println("Agente Comprador " + getAID().getName() + " finalizando");
    frame.dispose(); // Cerrar la interfaz gráfica al terminar
  }
  
  public AID[] getSellerAgents() {
    return sellerAgents;
  }
  
  public String getBookTitle() {
    return bookTitle;
  }
}

